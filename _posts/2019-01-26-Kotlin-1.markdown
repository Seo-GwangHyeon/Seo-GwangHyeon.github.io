---
layout: post
title:  "[Kotiln 0] Kotlin 시작하기"
date:   2019-01-26 20:00:00 +0900
categories: [kotlin]
---

코틀린 소개
- 코틀린은 정적으로 형식을 지정하는 최신의 안드로이드 호환 언어로서, null 포인터 예외나 장황한 코드 같은 자바의 많은 문제를 해결해준다. 코틀린은 스위프트, 스칼라, 그루비 C# 등 여러 최신언어의 영향을 받았다. 코틀린은 개발자의 경험과 개발 가이드라인(클린 코드, 이펙티브 자바)을 바탕으로 젯 브레인스에서 개발 했으며, 여러 프로그래밍 언어에 대한 심도 깊은 분석이 바탕이 됐다.

구글은 2017년 안드로이드 플랫폼의 공식 언어로 코틀린을 추가했지만, 코틀린이 선보인 지는 어느 정도 시간이 지났다. 코틀린의 사용자 커뮤니티는 상당히 활성화돼 있으며, 안드로이드 플랫폼에서 아주 빠른 속도로 보급되고 있다.
코틀린의 특징은 다음과 같이 5가지가 있다.

**안전성**
코틀린은 null 허용성과 불변성이라는 면에서 안전성을 제공한다. 코틀린은 정적으로 형식을 지정하므로 모든 식의 형식이 컴파일 시에 결정 된다. 즉, 컴파일러가 접근하려는 속성이나 메소드를 확인하고 특정 클래스 인스턴스가 존재하는지 여부도 검사할 수 있다. 자바도 정적으로 형식을 지정하지만 코틀린의 형식 시스템은 자바보다 훨씬 엄격하다. 예를 들어, 코틀린에서는 변수가 null 같은 값을 저장할 수 있는지 여부를 컴파일러에 알려야 하므로 런타임에 NullPointerException이 발생하는 대신 컴파일 시에 프로그램 실패를 확인할 수 있다.
**-> 컴파일 시에 정적으로 형식을 확인하기 때문에 안정성이 높고, NULL값 여부 역시 정적으로 지정해줘야하기 때문에 런타임에서 NullPointerException이 일어나지 않고 컴파일 오류가 나게 된다.**

**쉬운 디버깅**
애플리케이션이 정식 발매된 후 뒤늦게 버그를 발견하는 것이 아니라 개발 단계에서 훨씬 일찍 버그를 감지할 수 있다. 코틀린은 불변데이터를 처리하는 편리한 방법을 제공한다. 예를 들어, 편리한 인터페이스를 제공함으로써 가변(읽기 쓰기)과 불변(읽기 전용) 컬렌션을 구분할 수 있다.
**-> 아마 RW와 Read only를 인터페이스에 지정할 수 있는 듯하다? (더 보충할 예정)**

**간결함**
자바의 장황한 구문이 대부분 제거됐다. 적은 양의 코드도 공통적인 작업을 처리할 수 있으므로 자바 8과 비교하더라도 [보일러플레이트 코드]의 양이 크게 줄어들었다. 결과적으로 코드를 읽고 이해하기도 쉽다. 즉, 표현력이 우수하다.
**-> 아마 System.out.printl();과 같은 문법이 간결해진듯 하다.**

**상호 운용성**
코틀린은 자바와 상호 운용이 가능하게 설계됐다. (다중 언어 프로젝트), 기존의 자바 라이브러리와 프레임 워크 생태계를 코틀린에서 성능 저하 없이 활용할 수 있다. 또한 다양한 자바 라이브러리에서 코틀린과 구문 호환성을 높인 코틀린 전용 버정을 따로 제공하고 있다. 코틀린 클래스를 별도의 특수 구문 없이 자바 코드에서 직접 인스턴스로 만들고 투명하게 참조할 수 있으며, 그 반대도 마찬가지다. 덕분에 코틀린을 기존의 안드로이드 프로젝트에 통합하고 손쉽게 코틀린을 자바와 함께 사용할 수 있다.
**-> 자바와의 호환성이 좋은 것 같다.**

**다재다능성**
모바일 애플리에이션, 서버측 애플리케이션, 데스크톱 애플리케이션, 브라우저에서 실행되는 프론트엔드 코드, 심지어 빌드 시스템을 비롯한 다양한 플랫폼을 대상으로 개발할 수 있다.
**-> 그렇다.**

**코틀린 예제**
변수 선언 방법
~~~java
var name="Igor" // 유추형식은 String
name = "Marcin"
~~~
-> 세미콜론이 필요 없다.

~~~java
var name="Igor"
name = 2 // name 형식이 String 이므로 오류 발생
~~~
-> 유추 형식과 다른 값을 할당하면 컴파일 오류가 발생한다. 컴파일 언어이기 때문에 정적이어서, 형식이 중간에 변형되지는 않는다.

~~~java
var name="Marcin"
println("My name is $name") //출력: My name is Marcin
~~~
-> 코틀린이 문자열 템플릿을 이용하여 다중 문자열을 처리하는 방법
~~~java
var name="Igor" // 유추형식은 String
println("My name is ${name.toUpperCase()}")
//출력: My name is IGOR
~~~
-> 식 전체를 문자열 리터럴로 통합할 수도 있다.

~~~java
var a: String = "abc"
a = null //컴파일 오류

var b: String? = "abc"
b = null //정상
~~~
-> 코틀린에서는 null을 허용하는 값을 저장하는 변수에 별도의 표시가 필요하다.

~~~java
savedInstanceState?.doSomething
~~~
-> 데이터 형식에 물음표를 추가하면 해당 변수가 null을 허용한다는 것을 지정할 수 있다. 또한 코틀린은 null 허용 변수를 올바른 방법으로 처리한다. **안전 호출** 연산자를 이용해 null이 허용되는 변수에 대해 안전하게 메소드를 호출할 수 있다.
**안전호출?**
savedInstanceState의 값이 null이 아닌 경우에만 doSomething 메소드가 호출되며, null인 경우 호출이 무시된다.

**range데이터 형식**
~~~java
for (i in 1..10){
	print(i)
} // 12345678910
~~~

**pair데이터 형식**
~~~java
val capitol = "England" to "London"
println(capitol.first) // 출력 England
println(capitol.second) // 출력 London
~~~

**구조분해 선언** destructive declaration
~~~java
val (country, city)=capitol
println(country) // 출력 England
println(city) // 출력 London
~~~

pair 의 리스트를 대상으로 반복할 수도 있다.
~~~java
val capitols = listOf("England" to "London", "Poland" to "Warsaw")
for((country, city) in capitols) {
	println("Capitol of $country is $city")
}
//여기부터

~~~~




[보일러플레이트 코드]: https://en.wikipedia.org/wiki/Boilerplate_code
